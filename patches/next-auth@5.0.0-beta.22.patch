diff --git a/lib/actions.js b/lib/actions.js
index 7439f9cf46108cccccb610f2933c92e2f5d4c088..0480acbead1cd1e963048e201ce1e86ae5a32995 100644
--- a/lib/actions.js
+++ b/lib/actions.js
@@ -4,10 +4,10 @@ import { headers as nextHeaders, cookies } from "next/headers";
 // @ts-expect-error Next.js does not yet correctly use the `package.json#exports` field
 import { redirect } from "next/navigation";
 export async function signIn(provider, options = {}, authorizationParams, config) {
-    const headers = new Headers(nextHeaders());
+    const headers = new Headers(await nextHeaders());
     const { redirect: shouldRedirect = true, redirectTo, ...rest } = options instanceof FormData ? Object.fromEntries(options) : options;
     const callbackUrl = redirectTo?.toString() ?? headers.get("Referer") ?? "/";
-    const signInURL = createActionURL("signin", 
+    const signInURL = createActionURL("signin",
     // @ts-expect-error `x-forwarded-proto` is not nullable, next.js sets it by default
     headers.get("x-forwarded-proto"), headers, process.env, config);
     if (!provider) {
@@ -43,7 +43,7 @@ export async function signIn(provider, options = {}, authorizationParams, config
     const req = new Request(url, { method: "POST", headers, body });
     const res = await Auth(req, { ...config, raw, skipCSRFCheck });
     for (const c of res?.cookies ?? [])
-        cookies().set(c.name, c.value, c.options);
+        (await cookies().set(c.name, c.value, c.options));
     const responseUrl = res instanceof Response ? res.headers.get("Location") : res.redirect;
     // NOTE: if for some unexpected reason the responseUrl is not set,
     // we redirect to the original url
@@ -53,9 +53,9 @@ export async function signIn(provider, options = {}, authorizationParams, config
     return redirectUrl;
 }
 export async function signOut(options, config) {
-    const headers = new Headers(nextHeaders());
+    const headers = new Headers(await nextHeaders());
     headers.set("Content-Type", "application/x-www-form-urlencoded");
-    const url = createActionURL("signout", 
+    const url = createActionURL("signout",
     // @ts-expect-error `x-forwarded-proto` is not nullable, next.js sets it by default
     headers.get("x-forwarded-proto"), headers, process.env, config);
     const callbackUrl = options?.redirectTo ?? headers.get("Referer") ?? "/";
@@ -63,21 +63,21 @@ export async function signOut(options, config) {
     const req = new Request(url, { method: "POST", headers, body });
     const res = await Auth(req, { ...config, raw, skipCSRFCheck });
     for (const c of res?.cookies ?? [])
-        cookies().set(c.name, c.value, c.options);
+        (await cookies().set(c.name, c.value, c.options));
     if (options?.redirect ?? true)
         return redirect(res.redirect);
     return res;
 }
 export async function update(data, config) {
-    const headers = new Headers(nextHeaders());
+    const headers = new Headers(await nextHeaders());
     headers.set("Content-Type", "application/json");
-    const url = createActionURL("session", 
+    const url = createActionURL("session",
     // @ts-expect-error `x-forwarded-proto` is not nullable, next.js sets it by default
     headers.get("x-forwarded-proto"), headers, process.env, config);
     const body = JSON.stringify({ data });
     const req = new Request(url, { method: "POST", headers, body });
     const res = await Auth(req, { ...config, raw, skipCSRFCheck });
     for (const c of res?.cookies ?? [])
-        cookies().set(c.name, c.value, c.options);
+        (await cookies().set(c.name, c.value, c.options));
     return res.body;
 }
diff --git a/lib/index.js b/lib/index.js
index befa3370959cc66dc4f6c9dd9d5de23e9d2cba5b..73676e8d6a0fe379f291fcfc01303bb6ca345f90 100644
--- a/lib/index.js
+++ b/lib/index.js
@@ -1,11 +1,11 @@
 import { Auth, createActionURL } from "@auth/core";
 // @ts-expect-error Next.js does not yet correctly use the `package.json#exports` field
-import { headers } from "next/headers";
+import { headers as nextHeaders } from "next/headers";
 // @ts-expect-error Next.js does not yet correctly use the `package.json#exports` field
 import { NextResponse } from "next/server";
 import { reqWithEnvURL } from "./env.js";
 async function getSession(headers, config) {
-    const url = createActionURL("session", 
+    const url = createActionURL("session",
     // @ts-expect-error `x-forwarded-proto` is not nullable, next.js sets it by default
     headers.get("x-forwarded-proto"), headers, process.env, config);
     const request = new Request(url, {
@@ -20,7 +20,7 @@ async function getSession(headers, config) {
             // TODO: Taint the session data to prevent accidental leakage to the client
             // https://react.dev/reference/react/experimental_taintObjectReference
             async session(...args) {
-                const session = 
+                const session =
                 // If the user defined a custom session callback, use that instead
                 (await config.callbacks?.session?.(...args)) ?? {
                     ...args[0].session,
@@ -42,7 +42,7 @@ export function initAuth(config, onLazyLoad // To set the default env vars
         return async (...args) => {
             if (!args.length) {
                 // React Server Components
-                const _headers = headers();
+                const _headers = await nextHeaders();
                 const _config = await config(undefined); // Review: Should we pass headers() here instead?
                 onLazyLoad?.(_config);
                 return getSession(_headers, _config).then((r) => r.json());
@@ -88,7 +88,7 @@ export function initAuth(config, onLazyLoad // To set the default env vars
     return (...args) => {
         if (!args.length) {
             // React Server Components
-            return getSession(headers(), config).then((r) => r.json());
+            return nextHeaders().then((h) => getSession(h, config).then((r) => r.json()))
         }
         if (args[0] instanceof Request) {
             // middleware.ts inline
